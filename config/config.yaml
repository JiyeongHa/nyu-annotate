# Config file for the NYU Retinotopy Dataset.

display:
  figsize: [4, 4]
  dpi: 128
  plot_options:
    color: [0.75, 0.75, 1.0]
    linewidth: 2
    markersize: 1
    linestyle: "solid"
  fg_options:
    color: [1.0, 1.0, 1.0]
    markersize: 2

# In the init section, we want to make sure numpy and neuropythy are imported,
# and we want to make sure we have define a subject_path where we will load
# subjects from.
init: |
    # Import libraries.
    import neuropythy as ny, numpy as np
    # We load our data from this S3 bucket for the NYU Retinotopy Dataset.
    data_src = ny.util.pseudo_path(
        's3://openneuro.org/ds003787/',
        cache_path='/cache/dataset')
    # This is the neuropythy mask of the occipital pole for making flatmaps.
    occpole_mask = ('parcellation', 43)
# We assume in this example that the libraries neuropythy and numpy have been
# imported (as ny and np respectively) in the init section (see below).
targets:
    # The Subject ID is selectable because there are 3 of them.
    Subject ID:
        - sub-wlsubj001
        - sub-wlsubj004
        - sub-wlsubj006
        - sub-wlsubj007
        - sub-wlsubj014
        - sub-wlsubj019
        - sub-wlsubj023
        - sub-wlsubj042
        - sub-wlsubj043
        - sub-wlsubj045
        - sub-wlsubj046
        - sub-wlsubj055
        - sub-wlsubj056
        - sub-wlsubj057
        - sub-wlsubj062
        - sub-wlsubj064
        - sub-wlsubj067
        - sub-wlsubj071
        - sub-wlsubj076
        - sub-wlsubj079
        - sub-wlsubj081
        - sub-wlsubj083
        - sub-wlsubj084
        - sub-wlsubj085
        - sub-wlsubj086
        - sub-wlsubj087
        - sub-wlsubj088
        - sub-wlsubj090
        - sub-wlsubj091
        - sub-wlsubj092
        - sub-wlsubj094
        - sub-wlsubj095
        - sub-wlsubj104
        - sub-wlsubj105
        - sub-wlsubj109
        - sub-wlsubj114
        - sub-wlsubj115
        - sub-wlsubj116
        - sub-wlsubj117
        - sub-wlsubj118
        - sub-wlsubj120
        - sub-wlsubj121
        - sub-wlsubj122
        - sub-wlsubj126
    # Once we have established the subject ID, we can load the subject object,
    # which we will need for generating images.
    # This code block assumes that the `init` section defined the
    # `data_src` variable.
    subject: |
        subj = target['Subject ID']
        path = data_src.subpath('derivatives', 'freesurfer', subj)
        return ny.freesurfer_subject(path)
    # The hemisphere is another selectable item because there are 2 of them.
    Hemisphere:
        - LH
        - RH
    # Cortex, which has a string, is again a lazy value defined by a code
    # snippet. This snippet extracts the Cortex object for the selected
    # hemisphere.
    cortex: |
        subj = target['Subject ID']
        h = target['Hemisphere'].lower()
        ctx = target['subject'].hemis[h]
        # Load the retinotopy also.
        path = data_src.subpath('derivatives', 'prfanalyze-vista', subj,
                                'ses-nyu3t01')
        props = dict(
            polar_angle = ny.load(path.local_path(f"{h}.angle_adj.mgz")),
            theta = ny.load(path.local_path(f"{h}.angle.mgz")),
            eccentricity = ny.load(path.local_path(f"{h}.eccen.mgz")),
            x = ny.load(path.local_path(f"{h}.x.mgz")),
            y = ny.load(path.local_path(f"{h}.y.mgz")),
            radius = ny.load(path.local_path(f"{h}.sigma.mgz")),
            cod = ny.load(path.local_path(f"{h}.vexpl.mgz")))
        return ctx.with_prop(props)
    # Additionally, we create a flatmap projection for the hemisphere. Here we
    # make a projection of the occipital cortex.
    flatmap: |
        # Start by importing neuropythy.
        # Make a flatmap projection of the occipital cortex.
        c = target['cortex']
        return c.mask_flatmap(occpole_mask,
                              map_right='right',
                              radius=np.pi/2,
                              registration='native')
    # Finally, it's useful to have information about the image coordinates in
    # the target data, so we add these.
    xlim: |
        x = target['flatmap'].coordinates[0]
        return (np.min(x), np.max(x))
    ylim: |
        y = target['flatmap'].coordinates[1]
        return (np.min(y), np.max(y))
    projection_data: |
      proj = target['flatmap'].meta_data['projection']
      proj = proj.copy(mesh=None)
      return proj.normalize()
      
# When annotating V1-V3 using retinotopic maps; we need contours for the
# periphery and for V1, V2, and V3 boundaries. When drawn like this, they are
# all simple contours (not boundaries).
annotations:
  # V1 contours:
  V1 Foveal Point:
    type: point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V1 UVM (ventral):
    fixed_head: V1 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V1 LVM (dorsal):
    fixed_head: V1 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V1 Periphery:
    fixed_head:
      requires: V1 UVM (ventral)
      calculate: |
        return annotations['V1 UVM (ventral)'][-1,:]
    fixed_tail:
      requires: V1 LVM (dorsal)
      calculate: |
        return annotations['V1 LVM (dorsal)'][-1,:]
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  # V2 contours:
  V2 Foveal Point:
    type: point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V2 UVM (ventral):
    fixed_head: V2 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V2 LVM (dorsal):
    fixed_head: V2 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V2 Ventral Periphery:
    fixed_head:
      requires: V2 UVM (ventral)
      calculate: |
        return annotations['V2 UVM (ventral)'][-1,:]
    fixed_tail:
      requires: V1 UVM (ventral)
      calculate: |
        return annotations['V1 UVM (ventral)'][-1,:]
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V2 Dorsal Periphery:
    fixed_tail:
      requires: V2 LVM (dorsal)
      calculate: |
        return annotations['V2 LVM (dorsal)'][-1,:]
    fixed_head:
      requires: V1 LVM (dorsal)
      calculate: |
        return annotations['V1 LVM (dorsal)'][-1,:]
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  # V3 contours:
  V3 Foveal Point:
    type: point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V3 UVM (ventral):
    fixed_head: V3 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V3 LVM (dorsal):
    fixed_head: V3 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V3 Ventral Periphery:
    fixed_head:
      requires: V3 UVM (ventral)
      calculate: |
        return annotations['V3 UVM (ventral)'][-1,:]
    fixed_tail:
      requires: V2 UVM (ventral)
      calculate: |
        return annotations['V2 UVM (ventral)'][-1,:]
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V3 Dorsal Periphery:
    fixed_tail:
      requires: V3 LVM (dorsal)
      calculate: |
        return annotations['V3 LVM (dorsal)'][-1,:]
    fixed_head:
      requires: V2 LVM (dorsal)
      calculate: |
        return annotations['V2 LVM (dorsal)'][-1,:]
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  # Ventral Contours
  hV4 LVM (ventral-outer):
    fixed_head: V3 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  VO Outer:
    fixed_head:
      requires: V3 UVM (ventral)
      calculate: |
        return annotations['V3 UVM (ventral)'][-1,:]
    fixed_tail:
      requires: hV4 LVM (ventral-outer)
      calculate: |
        return annotations['hV4 LVM (ventral-outer)'][-1,:]
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  hV4-VO1 Boundary:
    - ["polar_angle", "eccentricity"]
    - ["curvature", "cod"]
  VO1-VO2 Boundary:
    - ["polar_angle", "eccentricity"]
    - ["curvature", "cod"]
  # Dorsal Contours
  V3a-V3b Outer:
    fixed_head:
      requires: V3 LVM (dorsal)
      calculate: |
        return annotations['V3 LVM (dorsal)'][-1,:]
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]
  V3a-V3b Inner:
    - ["polar_angle", "eccentricity"]
    - ["curvature", "cod"]
  IPS0 Outer:
    - ["polar_angle", "eccentricity"]
    - ["curvature", "cod"]
  LO1 Outer:
    fixed_head: V3 Foveal Point
    grid:
      - ["polar_angle", "eccentricity"]
      - ["curvature", "cod"]

figures:
    # We don't need an init block, but we do want to make sure the images all
    # have the xlim and ylim set correctly.
    term: |
        axes.set_xlim(target['xlim'])
        axes.set_ylim(target['ylim'])
        # We also want to put the projection data into the meta-data.
        meta_data['projection'] = target['projection_data']
    # The highlight images need some specific code to plot correctly.
    highlight_vm: |
        th = target['flatmap'].prop('theta')
        h = (1 - np.abs(np.cos(th)))**2
        ny.cortex_plot(target['flatmap'], color=h, axes=axes,
                       cmap='hot', vmin=0, vmax=1)
    highlight_hm: |
        th = target['flatmap'].prop('theta')
        h = (1 - np.abs(np.sin(th)))**2
        ny.cortex_plot(target['flatmap'], color=h, axes=axes,
                       cmap='hot', vmin=0, vmax=1)
    highlight_periphery: |
        eccen = target['flatmap'].prop('eccentricity')
        maxecc = np.nanpercentile(eccen, 95)
        hl = np.sqrt(np.abs(maxecc - eccen))*np.sqrt(maxecc)
        ny.cortex_plot(target['flatmap'], color=hl, axes=axes,
                       cmap='hot', vmax=0, vmin=maxecc)
    # The curvature is very straightforward.
    curvature: |
        ny.cortex_plot(target['flatmap'])
    # The COD needs some special parameters also.
    cod: |
        ny.cortex_plot(target['flatmap'], color='cod', axes=axes, cmap='hot',
                       vmin=0, vmax=1)
    # We also want to have thresholded versions of these plots.
    polar_angle_thresh: |
        ny.cortex_plot(target['flatmap'], color='polar_angle', axes=axes,
                       mash=('cod', 0.1, 1), cmap='hot', vmin=0, vmax=1)
    eccentricity_thresh: |
        ny.cortex_plot(target['flatmap'], color='eccentricity', axes=axes,
                       mash=('cod', 0.1, 1), cmap='hot', vmin=0, vmax=1)
    # The rest are PRF properties.
    _: |
        ny.cortex_plot(target['flatmap'], color=key, axes=axes)

review: |
  #from annotate import watershed_contours
  #im = watershed_contours(annotations.values(), max_depth=1)
  #axes.imshow(im, cmap='hsv', vmin=0, vmax=1.5*np.max(im))
  import numpy as np
  from matplotlib.pyplot import Polygon
  # V1:
  v1uvm = annotations['V1 UVM (ventral)']
  v1lvm = annotations['V1 LVM (dorsal)']
  v1per = annotations['V1 Periphery']
  v1pol = Polygon(
      np.vstack([v1uvm, v1per, np.flipud(v1lvm)]),
      closed=True,
      color='red',
      alpha=0.5,
      fill=True)
  axes.add_patch(v1pol)
  # V2:
  v2uvm = annotations['V2 UVM (ventral)']
  v2lvm = annotations['V2 LVM (dorsal)']
  v2pev = annotations['V2 Ventral Periphery']
  v2ped = annotations['V2 Dorsal Periphery']
  v2pol = Polygon(
      np.vstack(
          [v2uvm, v2pev, np.flipud(v1uvm), v1lvm, v2ped, np.flipud(v2lvm)]),
      closed=True,
      color='cyan',
      alpha=0.5,
      fill=True)
  axes.add_patch(v2pol)
  # V3:
  v3uvm = annotations['V3 UVM (ventral)']
  v3lvm = annotations['V3 LVM (dorsal)']
  v3pev = annotations['V3 Ventral Periphery']
  v3ped = annotations['V3 Dorsal Periphery']
  v3pol = Polygon(
      np.vstack(
          [v3uvm, v3pev, np.flipud(v2uvm), v2lvm, v3ped, np.flipud(v3lvm)]),
      color='black',
      alpha=0.5,
      closed=True)
  axes.add_patch(v3pol)
  axes.axis('equal')
  axes.axis('off')
